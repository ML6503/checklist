{
  "taskName": "Node.js 2022Q20 #REST Service & Containerization, Docker",
  "github": "https://github.com/AlreadyBored/nodejs-assignments/blob/main/assignments/rest-service/assignment.md",
  "criteria": [
    {
      "type": "title",
      "title": "Dear Evaluator,\nYou are to check only requirements listed in the assignment.\nIf any issue is not covered by assignment requirements, then neither should you check it nore evaluate.\n"
    },
    {
      "type": "title",
      "title": "All doubts are interpreted in favor of the student.\nIf you have doubts, whether or not to deduct points, do not deduct.\n"
    },
    {
      "type": "title",
      "title": "Basic Scope"
    },
    {
      "type": "title",
      "title": "REST Service"
    }, 
    {
      "type": "subtask",
      "text": "The repository with the application contains a Readme.md file containing detailed instructions for installing, running and using the application",
      "max": 10     
    },
    {
      "type": "subtask",
      "text": "The application code that worked with Users instance divided into modules according to to its purpose and Nest.js architecture conventions (work with request and response in controller, business logic in service, etc.)",     
      "max": 10 
    },
    {
      "type": "subtask",
      "text": "The application code that worked with Tracks instance instance divided into modules according to to its purpose and Nest.js architecture conventions (work with request and response in controller, business logic in service, etc.)",     
      "max": 10 
    },
    {
      "type": "subtask",
      "text": "The application code that worked with Albums instance instance divided into modules according to to its purpose and Nest.js architecture conventions (work with request and response in controller, business logic in service, etc.)",     
      "max": 10 
    },
    {
      "type": "subtask",
      "text": "The application code that worked with Artists instance instance divided into modules according to to its purpose and Nest.js architecture conventions (work with request and response in controller, business logic in service, etc.)",     
      "max": 10 
    },
    {
      "type": "subtask",
      "text": "The application code that worked with Favorites instance instance divided into modules according to to its purpose and Nest.js architecture conventions (work with request and response in controller, business logic in service, etc.)",     
      "max": 10 
    },
    {
      "type": "subtask",
      "text": "+10 For each successfully passed test",     
      "max": 660 
    },
    {
      "type": "title",
      "title": "Containerization, Docker"
    },

    {
      "type": "subtask",
      "text": "Readme.md has instruction how to run application",     
      "max": 20
    },
    {
      "type": "subtask",
      "text": "user-defined bridge is created and configured",     
      "max": 30 
    },
    {
      "type": "subtask",
      "text": "container auto restart after crash",     
      "max": 30
    },
    {
      "type": "subtask",
      "text": "application is restarting upon changes implemented into src folder",     
      "max": 20
    },
    {
      "type": "subtask",
      "text": "database files and logs to be stored in volumes instead of container",     
      "max": 30
    },   
    {
      "type": "title",
      "title": "Advanced Scope"
    },
    {
      "type": "title",
      "title": "REST Service"
    },
    {
      "type": "subtask",
      "text": "PORT value is stored into .env file",
      "max": 10
    },
    {
      "type": "subtask",
      "text": "OpenAPI spec in doc folder corresponds with assignment",
      "max": 20     
    },
    {
      "type": "title",
      "title": "Containerization, Docker"
    },
    {
      "type": "subtask",
      "text": "Final size of the Docker image with application is less than 500 MB",
      "max": 20     
    },
    {
      "type": "subtask",
      "text": "Implemented npm script for vulnerabilities scanning (free solution)",
      "max": 10
    },
    {
      "type": "subtask",
      "text": "Your built image is pushed to DockerHub",
      "max": 20     
    },  
    {
      "type": "title",
      "title": "Forfeits"      
    },
    {
      "type": "title",
      "title": "REST Service"      
    },
    {
      "type": "penalty",
      "text": "Changes in tests",
      "max": -660     
    },
    {
      "type": "penalty",
      "text": "Less than 3 commits in the development branch, not including commits that make changes only to Readme.md or similar files (tsconfig.json, .gitignore, .prettierrc.json, etc.)",
      "max": -20
    },
    {
      "type": "title",
      "title": "Containerization, Docker"      
    },
    {
      "type": "penalty",
      "text": "In case specific image is not used (it is required to use images like postgres and node, but not ubuntu with installation of node or postgres)",
      "max": -20     
    },
    {
      "type": "penalty",
      "text": "Postgres container is not configured as dependency for application container",
      "max": -20     
    },
    {
      "type": "penalty",
      "text": "docker-compose.yml contains hardcoded variables",
      "max": -20     
    },
    {
      "type": "title",
      "title": "Common forfeits for both: REST Service and Containerization, Docker"      
    },
    {
      "type": "penalty",
      "text": "Commits after deadline (except commits that affect only 'Readme.md', '.gitignore', etc.). Penalty is -30% of total task score",
      "max": -84
    },
    {
      "type": "penalty",
      "text": "No separate development branch",
      "max": -20
    },
    {
      "type": "penalty",
      "text": "No Pull Request",
      "max": -20
    },
    {
      "type": "penalty",
      "text": "Pull Request description is incorrect",
      "max": -10
    }   
    
  ]
}
